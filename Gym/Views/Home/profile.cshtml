@model Gym.Models.Man
<link rel="stylesheet" href="../css/profile.css">

<body id="profBd">
    <div id="cont">
        <img id="profileImg" src="../img/profile.png" alt="">
        <div id="dTitle">
            <h1>@Model.Name</h1>
        </div>

        <button onclick="AddCard()" id="AddCart">کارت</button>
        <button onclick="showConfirmDialog()" id="delUser">حذف</button>
        <button onclick="showEditPage()" id="EditUser">ویرایش</button>
        <button onclick="showTamdidPage()" id="tamdidBtn">تمدید</button>

        <div id="DCont">
            <div id="rightD">
                <p>فامیل</p>
                <p>شناسه کاربری</p>
                <p>سن</p>
                <p>وضعیت</p>
            </div>
            <div>
                <p>@Model.Lname</p>
                <p>@Model.Id</p>
                <p>@Model.Age</p>
                <p id="statusP"></p>
            </div>
            <div id="leftD">
                <p>شماره تماس</p>
                <p>تاریخ ثبت</p>
            </div>
            <div>
                <p>@Model.Number</p>
                <p>@Model.Date</p>
            </div>
        </div>
    </div>

    <!-- ویرایش -->
    <div id="edit-box" style="display: none;">
        <div class="confrim">
            <button id="closeEditBox" onclick="closeEditBox()">✖</button>
            <h5 id="BoxTitle">ویرایش اطلاعات</h5>
            <br>
            <input class="inputStyle" id="nameInp" type="text" placeholder="نام">
            <br><br>
            <input class="inputStyle" id="lnameInp" type="text" placeholder="نام خانوادگی">
            <br><br>
            <input class="inputStyle" id="ageInp" type="text" placeholder="سن">
            <br><br>
            <input class="inputStyle" id="numberInp" type="text" placeholder="شماره تماس">
            <br><br>
            <select class="inputStyle" id="genderInp">
                <option value="">جنسیت (اختیاری)</option>
                <option value="مرد">مرد</option>
                <option value="زن">زن</option>
            </select>
            <br><br>
            <button id="closeConfrim" onclick="closeConfrim()">ثبت تغییرات</button>
            <button id="CancelEdit" onclick="closeEditBox()">لغو</button>
        </div>
    </div>

    <!-- دیالوگ حذف -->
    <div id="confirm-dialog" class="dialog-overlay" style="display: none;">
        <div class="dialog-box">
            <p>آیا مطمئن هستید که می‌خواهید این کاربر را حذف کنید؟</p>
            <button onclick="confirmDelete()">بله</button>
            <button onclick="closeConfirmDialog()">خیر</button>
        </div>
    </div>

    <!-- لودینگ -->
    <div id="overlay" style="visibility: hidden;">
        <div id="loader"></div>
    </div>

    <!-- پیام کارت -->
    <div id="card-message" style="display: none;">
        <div id="cardd">
            <br>
            <p>لطفا کارت را نزدیک کنید</p>
            <br>
            <div id="countdown"></div>
        </div>
    </div>

    <!-- تمدید -->
    <div id="darkBg" style="display: none;">
        <div id="tamdidD">
            <p>تمدید ساعات کاری</p>
            <br>
            <input id="tamdidInp" type="text" placeholder="تعداد جلسات جدید">
            <br>
            <button onclick="tamdidjalase()" id="sabtTamdid">ثبت</button>
            <button onclick="closeTamdidPage()" id="cancelTamdid">لغو</button>
        </div>
    </div>

    <!-- پیام موفقیت -->
    <div id="messageBox" style="display: none;">
        <p id="secMessage"></p>
    </div>
</body>

<script src="../js/axios.js"></script>
<script src="../js/attendance-checker.js"></script>

<script>
    let nowStatus = @Json.Serialize(Model.Status);
    let ppp = document.getElementById("statusP");

    ppp.textContent = nowStatus === true ? "آنلاین" : "آفلاین";

    // نمایش صفحه ویرایش
    function showEditPage() {
        document.getElementById("edit-box").style.display = "flex";
    }

    function closeEditBox() {
        document.getElementById("edit-box").style.display = "none";
    }

    // ثبت تغییرات
    function closeConfrim() {
        document.getElementById("overlay").style.visibility = "visible";

        setTimeout(() => {
            document.getElementById("overlay").style.visibility = "hidden";
        }, 2000);

        let idForEdit = @Model.Id;
        let dataToSend = { id: idForEdit };

        let name = document.getElementById("nameInp").value.trim();
        let lname = document.getElementById("lnameInp").value.trim();
        let age = document.getElementById("ageInp").value.trim();
        let number = document.getElementById("numberInp").value.trim();
        let gender = document.getElementById("genderInp").value.trim();

        if (name) dataToSend.name = name;
        if (lname) dataToSend.lname = lname;
        if (age) dataToSend.age = age;
        if (number) dataToSend.number = number;
        if (gender) dataToSend.gender = gender;

        if (Object.keys(dataToSend).length === 1) {
            alert("هیچ اطلاعاتی وارد نشده است.");
            return;
        }

        axios.post("/home/updateUser", dataToSend)
            .then(res => showMessage("تغییرات ثبت شد"))
            .then(() => setTimeout(() => location.reload(), 2000))
            .catch(err => console.log(err));
    }

    // دیالوگ حذف
    function showConfirmDialog() {
        document.getElementById("confirm-dialog").style.display = "flex";
    }

    function closeConfirmDialog() {
        document.getElementById("confirm-dialog").style.display = "none";
    }

    function confirmDelete() {
        let idDel = @Model.Id;
        axios.post("/home/kkklll", idDel)
            .then(res => {
                if (res.data.success)
                    window.location.href = "../home/index2";
                else
                    alert(res.data.message);
            })
            .catch(() => alert("خطا در عملیات حذف."));
    }

    // تمدید جلسات
    function tamdidjalase() {
        let newClasses = document.getElementById("tamdidInp").value.trim();
        let newwClasses = newClasses * 60;
        let id = @Model.Id;

        if (!newClasses) {
            alert("لطفا تعداد جلسات را وارد کنید");
            return;
        }

        axios.post("/home/tamdidJalase", null, { params: { id, newwClasses } })
            .then(res => {
                showMessage(res.data);
                document.getElementById("darkBg").style.display = "none";
                setTimeout(() => location.reload(), 2000);
            })
            .catch(err => console.log(err));
    }

    function showTamdidPage() {
        document.getElementById("darkBg").style.display = "flex";
    }

    function closeTamdidPage() {
        document.getElementById("darkBg").style.display = "none";
    }

    async function AddCard() {
        gg = false; 
        document.getElementById("card-message").style.display = "flex";
        startCountdown(10);

        function startCountdown(durationInSeconds) {
            const countdownE1 = document.getElementById("countdown");
            let timeLeft = durationInSeconds;

            countdownE1.innerText = timeLeft;

            const timer = setInterval(() => {
                timeLeft--;
                countdownE1.innerText = timeLeft;
                if (timeLeft <= 0) {
                    clearInterval(timer);
                }
            }, 1000)
        }
        const cardUID = await waitForUid(); // متوقف می‌شود تا کارت خوانده شود
        if (!cardUID) {
            document.getElementById("card-message").style.display = "none";
            alert.innerText = "کارت شناسایی خوانده نشد. لطفاً دوباره تلاش کنید.";
            alert.style.color = "brown";
            return;
        }
        async function waitForUid(timeoutMs = 10000, intervalMs = 1000) {
            const start = Date.now();

            while (Date.now() - start < timeoutMs) {
                try {
                    console.log("منتظر کارت...");
                    const res = await fetch("http://localhost:5048/api/rfid");
                    const uid = await res.text();

                    if (uid && uid.trim() !== "") {
                        document.getElementById("overlay").style.visibility = "visible";
                        setTimeout(() => {
                            document.getElementById("overlay").style.visibility = "hidden";
                        }, 2000);
                        console.log(uid.trim());
                        document.getElementById("card-message").style.display = "none";
                        gg = true;
                        return uid.trim();
                    }
                } catch (err) {
                    console.error("خطا در دریافت UID:", err);
                }

                await new Promise(resolve => setTimeout(resolve, intervalMs));
            }

            // اگر زمان تمام شد و UID دریافت نشد
            let successMes = document.getElementById("messageBox")
            successMes.innerText = "هیچ کارتی خوانده نشد";
            successMes.style.display = "block";
            successMes.style.padding = "0px 0px"
            successMes.style.opacity = "0";

            setTimeout(() => {
                successMes.style.padding = "40px 30px"
                successMes.style.opacity = "1";
            }, 50)

            setTimeout(() => {
                successMes.style.padding = "0px 0px"
                successMes.style.opacity = "0";

                setTimeout(() => {
                    successMes.style.display = "none";
                }, 3000);
            }, 3000)
            document.getElementById("edit-box").style.display = "none";
            console.log("هیچ UID‌ای خوانده نشد.");
            gg = true;
            return null;
        }
        let id = @Model.Id;
        axios({
            url: "/home/editUid",
            method: "post",
            params: { uid: cardUID, id: id }
        })
            .then(res => {
                console.log(res.data)
                let successMes = document.getElementById("messageBox")
                successMes.innerText = res.data;
                successMes.style.display = "block";
                successMes.style.padding = "0px 0px"
                successMes.style.opacity = "0";

                setTimeout(() => {
                    successMes.style.padding = "40px 30px"
                    successMes.style.opacity = "1";
                }, 50)

                setTimeout(() => {
                    successMes.style.padding = "0px 0px"
                    successMes.style.opacity = "0";

                    setTimeout(() => {
                        successMes.style.display = "none";
                    }, 3000);
                }, 3000)
                document.getElementById("edit-box").style.display = "none";
            })
            .catch(err => console.log(err.message));
    }
        // پیام موفقیت انیمیشنی
        function showMessage(text) {
            let box = document.getElementById("messageBox");
            let msg = document.getElementById("secMessage");
            msg.innerText = text;
            box.style.display = "block";
            box.style.padding = "0";
            box.style.opacity = "0";

            setTimeout(() => {
                box.style.padding = "40px 30px";
                box.style.opacity = "1";
            }, 50);

            setTimeout(() => {
                box.style.padding = "0";
                box.style.opacity = "0";
                setTimeout(() => box.style.display = "none", 300);
            }, 3000);
        }
</script>